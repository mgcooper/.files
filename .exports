# shellcheck shell=bash

#### .exports
export BASH_SILENCE_DEPRECATION_WARNING=1 # suppress the prompt to switch to zsh
export CLICOLOR=1 # enable the use of color in the bash when using ls (if defined, can use -G rather than --colors=auto)
export LSCOLORS=ExFxCxDxBxegedabagacad
export EDITOR='/usr/local/bin/mate' # set editor
export GIT_EDITOR='/usr/local/bin/code --wait --new-window'
export JULIA_EDITOR='/usr/local/bin/code'
export LESSEDIT='mate -l %lm %f'
export LESS_TERMCAP_md="${CYAN}"; # Highlight section titles in manual pages.
export MANPAGER='less -R --use-color -Ddg -Du+y' # -D sets colors, -Ddg sets bold text green, -Du+y sets underlined text bright yellow
# export MANPAGER='less -X'; # Donâ€™t clear the screen after quitting a manual page.

# USER PATHS
export USER_DATA_PATH=${HOME}/work/data
export USER_PROJECT_PATH=${HOME}/myprojects
export USER_SOURCE_PATH=${HOME}/mysource
export USER_SCRIPTS_PATH=${HOME}/work/scripts
export USER_MATFUNCLIB_PATH=${HOME}/MATLAB/projects/matfunclib
export USER_PYFUNCLIB_PATH=${USER_PROJECT_PATH}/python/pyfunclib

export USER_E3SM_DATA_PATH=${HOME}/work/data/e3sm
export USER_E3SM_OUTPUT_PATH=${HOME}/work/data/e3sm/output
export USER_E3SM_CONFIG_PATH=${HOME}/work/data/e3sm/config
export USER_E3SM_FORCING_PATH=${HOME}/work/data/e3sm/forcing
export USER_E3SM_TEMPLATE_PATH=${HOME}/work/data/e3sm/templates

export COMPY_ROOT_PATH=coop558@compy01:
export COMPY_SCRATCH_PATH=${COMPY_ROOT_PATH}/compyfs/coop558/e3sm_scratch
export COMPY_DATA_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data
export COMPY_E3SM_DATA_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data/e3sm
export COMPY_E3SM_FORCING_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data/e3sm/forcing
export COMPY_E3SM_CONFIG_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data/e3sm/config

export USER_GDRIVE_PATH="$HOME/guycooper@g.ucla.edu - Google Drive/My Drive"

export CONSTANCE_ROOT_PATH=coop558@constance03:

export NERSC_ROOT_PATH=mcooper@perlmutter.nersc.gov:
export NERSC_SCRATCH_PATH=${NERSC_ROOT_PATH}/pscratch/sd/m/mcooper
export NERSC_HOME_PATH=${NERSC_ROOT_PATH}/global/homes/m/mcooper

# git config's that use variable expansions
# git config --global core.excludesfile "$HOME/.gitignore_global" 
# git config --global commit.template "$HOME/.gitcommit_template"

# for gfortran, may not be necessary if gfortran is reinstalled
export LIBRARY_PATH="$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"

# see if this resolves octave errors
# export DYLD_LIBRARY_PATH="/usr/local/lib:$DYLD_LIBRARY_PATH"

#--------------------------------
#   CONFIGURE BREW
#--------------------------------
# export HOMEBREW_LOGS="/path/to/logs/folder" # just for reference, an option
export HOMEBREW_NO_AUTO_UPDATE=1 #
# brew will respect http_proxy, https_proxy, all_proxy, ftp_proxy, and/or no_proxy environment variables set below
# I searched the brew doc's and there are no environment variables HOMEBREW_CC or HOMEBREW_CXX but issue brew --env and they are visible (clang/clang++)
export HOMEBREW_CC=gcc-11
export HOMEBREW_CXX=g++-11
export HOMEBREW_AUTO_UPDATE_SECS=604800	# autoupdate once a week (not every time).

#--------------------------------
#   CONFIGURE QGIS
#--------------------------------
export QGISPATH=/Applications/QGIS.app
	
# for using qgis outside of qgis:
# https://gis.stackexchange.com/questions/385395/using-pyqgis-functions-outside-qgis?noredirect=1&lq=1
# spcifically the links in tara's answer, esp. link 1 and 3

#--------------------------------
#   CONFIGURE MATLAB
#--------------------------------

export MATLAB_ROOT_PATH=/Applications/MATLAB_R2022b.app # matlabroot
# export MATLAB_EXEC_PATH=/Applications/MATLAB_R2022b.app/bin # not sure if this is needed, I thought it was used by something
export MATLAB_EXEC_PATH=/Applications/MATLAB_R2022b.app/bin/matlab # executable, used by (unofficial) matlab vscode extension
export MATLAB_STARTUP_PATH=$HOME/Documents/MATLAB # for code runner -sd $MATLAB_STARTUP_PATH option

#--------------------------------
#   CONFIGURE JAVA
#--------------------------------
export JAVA_HOME="/usr/local/Cellar/openjdk/19.0.1/libexec/openjdk.jdk/Contents/Home"

#--------------------------------
#   CONFIGURE CONDA
#--------------------------------

# define this for conda hooks
export CONDA_PROJECT_HOME=${USER_PROJECT_PATH}/conda
# export CONDA_PROJECT_PATH=${USER_PROJECT_PATH}/conda # init so the alias works

# this is in condarc but that may not get sourced by vscode or others, so put it here too
# putting it here fixed the problem where conda deactivate never deactivated base
export CONDA_AUTO_ACTIVATE_BASE=false

#--------------------------------
# 	PYTHONPATH, etc.
#--------------------------------

# Add pyfunclib to python path
# if [[ ":$PYTHONPATH:" != *":${USER_PROJECT_PATH}/python/pyfunclib:"* ]]; then
#     export PYTHONPATH="${USER_PROJECT_PATH}/python/pyfunclib:${PYTHONPATH}"
# fi

# Add pyflowline to python path
# if [[ ":$PYTHONPATH:" != *":${USER_PROJECT_PATH}/python/pyflowline:"* ]]; then
#     export PYTHONPATH="${USER_PROJECT_PATH}/python/pyflowline:${PYTHONPATH}"
# fi

# # expose pyfunclib
# export PYTHONPATH=${USER_PROJECT_PATH}/python/pyfunclib
# export PYTHONPATH=${USER_PROJECT_PATH}/python/pyflowline:${PYTHONPATH}

# i think i added this when building pyflowline from source
# export PYTHONPATH=${WORKON_HOME}/pyflowline/lib/python3.9/site-packages:${PYTHONPATH}
# see .extra for tool-specific exports/configuration

#--------------------------------
#   CONFIGURE R
#--------------------------------

# multiple R versions can be installed side-by-side. these are options to choose one.

# tell radian (and vscode?) where r is. only R_HOME is required. R_BINARY is here for reference.
export R_HOME=/Library/Frameworks/R.framework/Resources # R.home() in the R gui
# export R_BINARY=/Library/Frameworks/R.framework/Resources/bin # R.home('bin') in the R gui

# tell Rstudio which R to use. not sure if Rstudio uses /usr/local/Cellar/r or /Library/Frameworks/R.framework/Resources/R
# export RSTUDIO_WHICH_R=/usr/local/Cellar/r

# for cli, alias radian to use a particular r binary:
# alias radian='radian --r-binary=/path/to/R'

#--------------------------------
#   bash-completion (see bash_profile for sourcing them)
#--------------------------------
export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"

#----------------------------------------------------------------------------------
# for z package
# . /usr/local/etc/profile.d/z.sh
#----------------------------------------------------------------------------------

#--------------------------------
# HDF5 / NETCDF
#--------------------------------


# This is for the full-on build of all dependencies from source I put in /usr/local/netcdf (see the build script in scripts/)
# export PATH=/usr/local/netcdf/bin:$PATH
# export LD_LIBRARY_PATH=/usr/local/netcdf/lib:$LD_LIBRARY_PATH
# export C_INCLUDE_PATH=/usr/local/netcdf/include:$C_INCLUDE_PATH
# export CPLUS_INCLUDE_PATH=/usr/local/netcdf/include:$CPLUS_INCLUDE_PATH
# export MANPATH=/usr/local/netcdf/share/man:$MANPATH

# # This was for a build using brew-installed hdf5 and pnetcdf
# HDF5_PATH="$(brew --prefix hdf5-mpi)"
# PNETCDF_PATH="$(brew --prefix pnetcdf)"
# # NETCDF_PATH="$(brew --prefix netcdf)"

# export HDF5_DIR="$HDF5_PATH"
# export HDF5_ROOT="$HDF5_PATH"
# export HDF5_HOME="$HDF5_PATH"
# export PNETCDF_DIR="$PNETCDF_PATH"

# Not if building from source
# export NETCDF_DIR="$NETCDF_PATH"
# export NETCDF_INCLUDE_DIR="$NETCDF_PATH/include"
# export NETCDF_LIB="$NETCDF_PATH/lib"
# export LD_LIBRARY_PATH="$HDF5_DIR/lib:$PNETCDF_DIR/lib:$NETCDF_DIR/lib:$LD_LIBRARY_PATH"

# export LD_LIBRARY_PATH="$HDF5_DIR/lib:$PNETCDF_DIR/lib:$LD_LIBRARY_PATH"

#--------------------------------
# CMAKE
#--------------------------------
# Commented out, set on an individual basis for now
# export CMAKE_INSTALL_PREFIX=${HOME}/opt