# shellcheck shell=bash

#### .exports
export BASH_SILENCE_DEPRECATION_WARNING=1 # suppress the prompt to switch to zsh
export CLICOLOR=1 # enable the use of color in the bash when using ls (if defined, can use -G rather than --colors=auto)
export LSCOLORS=ExFxCxDxBxegedabagacad
export EDITOR='/usr/local/bin/mate' # set editor
export GIT_EDITOR='/usr/local/bin/code --wait --new-window'
export JULIA_EDITOR='/usr/local/bin/code'
export LESSEDIT='mate -l %lm %f'
export LESS_TERMCAP_md="${CYAN}"; # Highlight section titles in manual pages.
export MANPAGER='less -R --use-color -Ddg -Du+y' # -D sets colors, -Ddg sets bold text green, -Du+y sets underlined text bright yellow
# export MANPAGER='less -X'; # Donâ€™t clear the screen after quitting a manual page.

# USER PATHS
export USER_DATA_PATH=${HOME}/work/data
export USER_PROJECT_PATH=${HOME}/myprojects
export USER_SOURCE_PATH=${HOME}/mysource
export USER_SCRIPTS_PATH=${HOME}/work/scripts
export USER_MATFUNCLIB_PATH=${HOME}/MATLAB/projects/matfunclib
export USER_PYFUNCLIB_PATH=${USER_PROJECT_PATH}/python/pyfunclib

export USER_E3SM_DATA_PATH=${HOME}/work/data/e3sm
export USER_E3SM_OUTPUT_PATH=${HOME}/work/data/e3sm/output
export USER_E3SM_CONFIG_PATH=${HOME}/work/data/e3sm/config
export USER_E3SM_FORCING_PATH=${HOME}/work/data/e3sm/forcing
export USER_E3SM_TEMPLATE_PATH=${HOME}/work/data/e3sm/templates

export COMPY_ROOT_PATH=coop558@compy01:
export COMPY_SCRATCH_PATH=${COMPY_ROOT_PATH}/compyfs/coop558/e3sm_scratch
export COMPY_DATA_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data
export COMPY_E3SM_DATA_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data/e3sm
export COMPY_E3SM_FORCING_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data/e3sm/forcing
export COMPY_E3SM_CONFIG_PATH=${COMPY_ROOT_PATH}/qfs/people/coop558/data/e3sm/config

export USER_GDRIVE_PATH="$HOME/guycooper@g.ucla.edu - Google Drive/My Drive"

export CONSTANCE_ROOT_PATH=coop558@constance03:

export NERSC_ROOT_PATH=mcooper@perlmutter.nersc.gov:
export NERSC_SCRATCH_PATH=${NERSC_ROOT_PATH}/pscratch/sd/m/mcooper
export NERSC_HOME_PATH=${NERSC_ROOT_PATH}/global/homes/m/mcooper

# git config's that use variable expansions
# git config --global core.excludesfile "$HOME/.gitignore_global" 
# git config --global commit.template "$HOME/.gitcommit_template"

# for gfortran, may not be necessary if gfortran is reinstalled
export LIBRARY_PATH="$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"

# see if this resolves octave errors
# export DYLD_LIBRARY_PATH="/usr/local/lib:$DYLD_LIBRARY_PATH"

#--------------------------------
#   CONFIGURE BREW
#--------------------------------
# export HOMEBREW_LOGS="/path/to/logs/folder" # just for reference, an option
export HOMEBREW_NO_AUTO_UPDATE=1 #
# brew will respect http_proxy, https_proxy, all_proxy, ftp_proxy, and/or no_proxy environment variables set below
# I searched the brew doc's and there are no environment variables HOMEBREW_CC or HOMEBREW_CXX but issue brew --env and they are visible (clang/clang++)
export HOMEBREW_CC=gcc-11
export HOMEBREW_CXX=g++-11
export HOMEBREW_AUTO_UPDATE_SECS=604800	# autoupdate once a week (not every time).

#--------------------------------
#   CONFIGURE PYENV
#--------------------------------

# pyenv github page suggests this newer config setup should work:
# export PYENV_ROOT="$HOME/.pyenv"
# command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"

# expose pyenv and prefix source prompt with virtualenvwrapper environment
if which pyenv > /dev/null; then
	eval "$(pyenv init --path)";
	eval "$(pyenv init -)"	
	if which pyenv-virtualenv-init > /dev/null; then 
		eval "$(pyenv virtualenv-init -)"; 
	fi
fi
pyenv global 3.9.0 2.7.18 jupyter3 ipython2 tools3 tools2

export WORKON_HOME=${HOME}/.virtualenvs	# folder where virtualenvwrapper puts virtualenvs
export PROJECT_HOME=${USER_PROJECT_PATH}/python # folder where I keep my virtualenvs
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true" # tell pyenv to use pyenv-virtualenv
export PYENV_VIRTUALENV_DISABLE_PROMPT="true" # turn off deprecated pyenv prompt
export PYENV_VIRTUALENV_VERBOSE_ACTIVATE="true" # verbose activate behavior 
	
pyenv virtualenvwrapper_lazy

#--------------------------------
#   CONFIGURE ITERM2
#--------------------------------
iterm2_print_user_vars()
{
    iterm2_set_user_var python_venv "$VIRTUAL_ENV"
}

#--------------------------------
#   CONFIGURE QGIS
#--------------------------------
export QGISPATH=/Applications/QGIS.app
	
# for using qgis outside of qgis:
# https://gis.stackexchange.com/questions/385395/using-pyqgis-functions-outside-qgis?noredirect=1&lq=1
# spcifically the links in tara's answer, esp. link 1 and 3

#--------------------------------
#   CONFIGURE MATLAB
#--------------------------------

export MATLAB_ROOT_PATH=/Applications/MATLAB_R2022b.app # matlabroot
# export MATLAB_EXEC_PATH=/Applications/MATLAB_R2022b.app/bin # not sure if this is needed, I thought it was used by something
export MATLAB_EXEC_PATH=/Applications/MATLAB_R2022b.app/bin/matlab # executable, used by (unofficial) matlab vscode extension
export MATLAB_STARTUP_PATH=$HOME/Documents/MATLAB # for code runner -sd $MATLAB_STARTUP_PATH option

#--------------------------------
#   CONFIGURE JAVA
#--------------------------------
export JAVA_HOME="/usr/local/Cellar/openjdk/19.0.1/libexec/openjdk.jdk/Contents/Home"

#--------------------------------
#   CONFIGURE CONDA
#--------------------------------

# enable conda autocompletion (got this to work by upgrading to bash v5)
export CONDA_PREFIX=$HOME/opt/anaconda3
if [[ -r $CONDA_PREFIX/etc/profile.d/bash_completion.sh ]]; then
	source "$CONDA_PREFIX"/etc/profile.d/bash_completion.sh
fi

# define this for conda hooks
export CONDA_PROJECT_HOME=${USER_PROJECT_PATH}/conda
# export CONDA_PROJECT_PATH=${USER_PROJECT_PATH}/conda # init so the alias works

# this is in condarc but that may not get sourced by vscode or others, so put it here too
# putting it here fixed the problem where conda deactivate never deactivated base
export CONDA_AUTO_ACTIVATE_BASE=false

# might revisit this thread to simplify the conda init stuff in bash_profile
# https://stackoverflow.com/questions/54429210/how-do-i-prevent-conda-from-activating-the-base-environment-by-default
# https://github.com/conda/conda/blob/main/CHANGELOG.md#recommended-change-to-enable-conda-in-your-shell

# from the links above, something like this may be all that is needed:
# eval "$('/C/ProgramData/Miniconda3/Scripts/conda.exe' 'shell.bash' 'hook')"

# or this:
# # source $HOME/opt/anaconda3/etc/profile.d/conda.sh

#--------------------------------
# 	PYTHONPATH, etc.
#--------------------------------

# expose pyfunclib
export PYTHONPATH=${USER_PROJECT_PATH}/python/pyfunclib
export PYTHONPATH=${USER_PROJECT_PATH}/python/pyflowline:${PYTHONPATH}

# i think i added this when building pyflowline from source
# export PYTHONPATH=${WORKON_HOME}/pyflowline/lib/python3.9/site-packages:${PYTHONPATH}
# see .extra for tool-specific exports/configuration

#--------------------------------
#   CONFIGURE R
#--------------------------------

# multiple R versions can be installed side-by-side. these are options to choose one.

# tell radian (and vscode?) where r is. only R_HOME is required. R_BINARY is here for reference.
export R_HOME=/Library/Frameworks/R.framework/Resources # R.home() in the R gui
# export R_BINARY=/Library/Frameworks/R.framework/Resources/bin # R.home('bin') in the R gui

# tell Rstudio which R to use. not sure if Rstudio uses /usr/local/Cellar/r or /Library/Frameworks/R.framework/Resources/R
# export RSTUDIO_WHICH_R=/usr/local/Cellar/r

# for cli, alias radian to use a particular r binary:
# alias radian='radian --r-binary=/path/to/R'

#--------------------------------
#   bash-completion (Git too)
#--------------------------------
export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
[[ -r "/usr/local/etc/bash_completion.d/git-completion.bash" ]] && . "/usr/local/etc/bash_completion.d/git-completion.bash"
[[ -r "/usr/local/etc/bash_completion.d/git-prompt.sh" ]] && . "/usr/local/etc/bash_completion.d/git-prompt.sh"


#----------------------------------------------------------------------------------
# for z package
# . /usr/local/etc/profile.d/z.sh
#----------------------------------------------------------------------------------
