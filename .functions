# shellcheck shell=bash

#### bash functions _*_

# should probably move these the .local/bin (currently $HOME/bin)
# and if desired, could replicate what happens here as:
# for fileinc in ~/.local/bin*
# do
#    source ${fileinc}
#    export -f ${fileinc}
# done
# unset fileinc

# or:
# for fileinc in $HOME/.local/${SHELL##*/}/*.inc; do
#         [ -r "$fileinc" ] && .  "$fileinc"
# done
# unset fileinc

# The $@ passes the arguments into the function as-is. If nothing is passed in, it equals 0, but I modified to use -f $1 where $1 is the first argument. For multiple arguments, I would need to change that. 
# mrun() {
# 	if [ $@ -eq 0 ]; then
#     	echo "please pass m file name as input"
# 	fi
# matlab -nodisplay -nosplash -nodesktop -r "run('$1'); | tail -n +11"
# }

# remove a directory containing a .git directory
rmproject() {
	if [ -d "$1" ] && [ -d "$1"/.git ]; then
		# echo "$1"
		# rm -rf "$1"
		trash "$1"
	fi
}

# assumes 'matlab' is aliased to the matlab executable
# update 23 mar 2023, removed the alias but added matlab to PATH, if it doesnt work revisit, maybe add full path here:
# /Applications/MATLAB_R2022b.app/bin/matlab -nodisplay -nodesktop -nosplash
mrun() {
	if [ -f "$1" ]; then
		matlab -nodisplay -nosplash -nodesktop -r "run('$1');exit;" | tail -n +11
	else
		echo "please pass m file name as input"
	fi
}


# open a markdown file in the cwd named with the current date
# and any suffix provided as arguments to the command.
note() {
    note_name=""
    if [[ ! -z "$*" ]]; then
        # Use all arguments as trailing name for note
        # (spaces replaced by dashes)
        note_name="${*// /-}-"
    fi
    mate "$note_name$(date "+%Y-%m-%d")".md
}

# this isn't really what i want b/c it only pipes to less if ls -la is used; fix later
lsless () {
	if [[ $@ == "-la" ]]; then
		command ls -la | less
	else
		command ls "$@"
	fi
}
	
# commented this out. see MANPAGER in .exports. not sure whch is preferred.
# color man pages
# man() {
# 	env \
# 		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
# 		LESS_TERMCAP_md=$(printf "\e[1;31m") \
# 		LESS_TERMCAP_me=$(printf "\e[0m") \
# 		LESS_TERMCAP_se=$(printf "\e[0m") \
# 		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
# 		LESS_TERMCAP_ue=$(printf "\e[0m") \
# 		LESS_TERMCAP_us=$(printf "\e[1;32m") \
# 		man "$@"
# }
	
# list overloaded built ins and files (check for conflicts or unexpected behavior)
# see other approaches here:
# https://unix.stackexchange.com/questions/52161/how-to-test-for-possible-conflicts-while-using-alias-in-bashrc
aliaschecker () {
	alias                            |
	awk -F '[ =]+' '{print $2}'      |
	while read cmd; do
		type -ta "$cmd" | grep -q file \
		&& printf "%s is overloaded: \"%s\"\n" "$cmd" "$(alias $cmd)"
	done
}

#----------------------------------------------------------------------------------
# from https://natelandau.com/my-mac-osx-bash_profile/, see for many more options:
#   extract:  Extract most know archives with one command
#----------------------------------------------------------------------------------
extract () {
	if [ -f "$1" ] ; then
		case $1 in
		*.tar.bz2)   tar xjf "$1"   ;;
		*.tar.gz)    tar xzf "$1"   ;;
		*.bz2)       bunzip2 "$1"   ;;
		*.rar)       unrar e "$1"   ;;
		*.gz)        gunzip "$1"    ;;
		*.tar)       tar xf "$1"    ;;
		*.tbz2)      tar xjf "$1"   ;;
		*.tgz)       tar xzf "$1"   ;;
		*.zip)       unzip "$1"     	;;
		*.Z)         uncompress "$1" 	;;
		*.7z)        7z x "$1"       	;;
		*)     echo "'$1' cannot be extracted via extract()" ;;
			esac
		else
			echo "'$1' is not a valid file"
		fi
}
	
# # search recursively for files, excluding dotfiles (doesn't exclude dot directories)
filesearch () {
	find . -type f \( -iname "$1" ! -iname ".*" \)
}
	
# for more: https://www.cyberciti.biz/faq/find-command-exclude-ignore-files/

# Create a data URL from a file
dataurl () {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}


# not sure if this is correct syntax for .functions, 
# function whichreally() {
# 	for a in "$@" ; do
#     target "$(which "$a")"
# 	done
# }